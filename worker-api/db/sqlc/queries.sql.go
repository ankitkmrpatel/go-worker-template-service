// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addFile = `-- name: AddFile :one
INSERT INTO files (id, thread_id, name, size, content)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id, thread_id, name, size, content
`

type AddFileParams struct {
	ID       string
	ThreadID sql.NullString
	Name     string
	Size     int64
	Content  []byte
}

func (q *Queries) AddFile(ctx context.Context, arg AddFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, addFile,
		arg.ID,
		arg.ThreadID,
		arg.Name,
		arg.Size,
		arg.Content,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Name,
		&i.Size,
		&i.Content,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :one
DELETE FROM files WHERE id = ?1
RETURNING id
`

func (q *Queries) DeleteFile(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteFile, id)
	err := row.Scan(&id)
	return id, err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, thread_id, name, size, content FROM files WHERE id = ?1
`

func (q *Queries) GetFileByID(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Name,
		&i.Size,
		&i.Content,
	)
	return i, err
}

const listFilesByThread = `-- name: ListFilesByThread :many
SELECT id, thread_id, name, size, content FROM files WHERE thread_id = ?1
`

func (q *Queries) ListFilesByThread(ctx context.Context, threadID sql.NullString) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFilesByThread, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Name,
			&i.Size,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileName = `-- name: UpdateFileName :one
UPDATE files
SET name = ?1
WHERE id = ?2
RETURNING id, thread_id, name, size, content
`

type UpdateFileNameParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateFileName(ctx context.Context, arg UpdateFileNameParams) (File, error) {
	row := q.db.QueryRowContext(ctx, updateFileName, arg.Name, arg.ID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Name,
		&i.Size,
		&i.Content,
	)
	return i, err
}
